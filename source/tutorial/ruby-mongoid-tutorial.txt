.. http://docs.mongodb.org/ecosystem/tutorial/ruby-mongoid-tutorial/

.. _ruby-mongoid-tutorial:

========================
Mongoid Tutorial (5.0.0)
========================

.. default-domain:: mongodb

This tutorial discusses using the object document mapper Mongoid.


Installation
------------

Installing The Gem
``````````````````

Mongoid is bundled as a gem, and is hosted on `Rubygems <http://rubygems.org>`_.
It can be installed manually or with bundler.

To install the gem manually:

.. code-block:: sh

    gem install mongoid

To install the gem with bundler, include the following in your Gemfile:

.. code-block:: ruby

    gem 'mongoid', '~> 5.0'

Compatibility
`````````````

Note the following compatibility matrix to determine if Mongoid is
supported on your runtime and server.

.. list-table::
   :header-rows: 1
   :widths: 28 30 30 30

   * - Ruby Version
     - 2.4.x
     - 2.6.x
     - 3.0.x

   * - MRI 1.8.x
     - No
     - No
     - No

   * - MRI 1.9.x
     - Yes
     - Yes
     - Yes

   * - MRI 2.0.x
     - Yes
     - Yes
     - Yes

   * - MRI 2.1.x
     - Yes
     - Yes
     - Yes

   * - MRI 2.2.x
     - Yes
     - Yes
     - Yes

   * - JRuby 1.7.x
     - Yes
     - Yes
     - Yes

Configuration
`````````````

Mongoid configuration can be done through a ``mongoid.yml`` that specifies your
options and clients. The simplest configuration is as follows, which sets the default
client to "localhost:27017" and provides a single database in that client named "mongoid".

.. code-block:: yaml

  development:
    clients:
      default:
        database: mongoid
        hosts:
          - localhost:27017

Rails Applications
******************

You can generate a config file by executing the generator and then editing
``myapp/config/mongoid.yml`` to your heart's desire. Mongoid will then handle
everything else from there.

.. code-block:: bash

  $ rails g mongoid:config

When Mongoid loads its configuration, it chooses the environment to used based
on the following order:

- ``Rails.env`` if using Rails.
- ``Sinatra::Base.environment`` if using Sinatra.
- ``RACK_ENV`` environment variable.
- ``MONGOID_ENV`` environment variable.

If you are not using any rack based application and want to override the
environment programatically, you can pass a second paramter to ``load!`` and
Mongoid will use that.

.. code-block:: ruby

  Mongoid.load!("path/to/your/mongoid.yml", :production)

Anatomy of a Mongoid Config
***************************

Let's have a look at a full-blown ``mongoid.yml`` and explain the full power
of what Mongoid can do. The following configuration has its explanation in the
comments above each key.

.. code-block:: yaml

  development:
    # Configure available database clients. (required)
    clients:
      # Defines the default client. (required)
      default:
        # Defines the name of the default database that Mongoid can connect to.
        # (required).
        database: my_db
        # Provides the hosts the default client can connect to. Must be an array
        # of host:port pairs. (required)
        hosts:
          - myhost1.mydomain.com:27017
          - myhost2.mydomain.com:27017
          - myhost3.mydomain.com:27017
        options:
          # Change the default write concern. (default = { w: 1 })
          write:
            w: 1

          # Change the default read preference. Valid options for mode are: :secondary,
          # :secondary_preferred, :primary, :primary_preferred, :nearest
          # (default: primary)
          read:
            mode: :secondary_preferred

          # The name of the user for authentication.
          user: 'user'

          # The password of the user for authentication.
          password: 'password'

          # The user's database roles.
          roles:
            - 'dbOwner'

          # Change the default authentication mechanism. Valid options are: :scram,
          # :mongodb_cr, :mongodb_x509, and :plain. (default on 3.0 is :scram, default
          # on 2.4 and 2.6 is :plain)
          auth_mech: :scram

          # The database or source to authenticate the user against. (default: admin)
          auth_source: admin

          # Force a the driver cluster to behave in a certain manner instead of auto-
          # discovering. Can be one of: :direct, :replica_set, :sharded. Set to :direct
          # when connecting to hidden members of a replica set.
          connect: :direct

          # Changes the default time in seconds the server monitors refresh their status
          # via ismaster commands. (default: 10)
          heartbeat_frequency: 10

          # The time in seconds for selecting servers for a near read preference. (default: 5)
          local_threshold: 5

          # The timeout in seconds for selecting a server for an operation. (default: 30)
          server_selection_timeout: 30

          # The maximum number of connections in the connection pool. (default: 5)
          max_pool_size: 5

          # The minimum number of connections in the connection pool. (default: 1)
          min_pool_size: 1

          # The time to wait, in seconds, in the connection pool for a connection
          # to be checked in before timing out. (default: 5)
          wait_queue_timeout: 5

          # The time to wait to establish a connection before timing out, in seconds.
          # (default: 5)
          connect_timeout: 5

          # The timeout to wait to execute operations on a socket before raising an error.
          # (default: 5)
          socket_timeout: 5

          # The name of the replica set to connect to. Servers provided as seeds that do
          # not belong to this replica set will be ignored.
          replica_set: my_replica_set

          # Whether to connect to the servers via ssl. (default: false)
          ssl: true

          # The certificate file used to identify the connection against MongoDB.
          ssl_cert: /path/to/my.cert

          # The private keyfile used to identify the connection against MongoDB.
          # Note that even if the key is stored in the same file as the certificate,
          # both need to be explicitly specified.
          ssl_key: /path/to/my.key

          # A passphrase for the private key.
          ssl_key_pass_phrase: password

          # Whether or not to do peer certification validation. (default: false)
          ssl_verify: true

          # The file containing a set of concatenated certification authority certifications
          # used to validate certs passed from the other end of the connection.
          ssl_ca_cert: /path/to/ca.cert

    # Configure Mongoid specific options. (optional)
    options:
      # Includes the root model name in json serialization. (default: false)
      include_root_in_json: false

      # Include the _type field in serialization. (default: false)
      include_type_for_serialization: false

      # Preload all models in development, needed when models use
      # inheritance. (default: false)
      preload_models: false

      # Raise an error when performing a #find and the document is not found.
      # (default: true)
      raise_not_found_error: true

      # Raise an error when defining a scope with the same name as an
      # existing method. (default: false)
      scope_overwrite_exception: false

      # Use Active Support's time zone in conversions. (default: true)
      use_activesupport_time_zone: true

      # Ensure all times are UTC in the app side. (default: false)
      use_utc: false

Logging
*******

Changing logging options is done simply by telling Mongoid or the driver's logger to have
a different level. Logging level is ``DEBUG`` by default.

.. code-block:: ruby

  Mongoid.logger.level = Logger::DEBUG
  Mongo.logger.level = Logger::DEBUG


Documents
---------

Documents are the core objects in Mongoid and any object that is to be persisted to the
database must include ``Mongoid::Document``. The representation of a Document in MongoDB
is a BSON object that is very similar to a Ruby hash or JSON object. Documents can be stored
in their own collections in the database, or can be embedded in other Documents n levels deep.

Storage
```````

Mongoid by default stores documents in a collection that is the pluralized form of the class name.
For the following ``Person`` class, the collection the document would get stored in would be named ``people``.

.. code-block:: ruby

  class Person
    include Mongoid::Document
  end

Model class names cannot end with "s", because it will be considered as the pluralized form of
the word. For example "Status" would be considered as the plural form of "Statu",
which will cause a few known problems.

This is a limitation of the ``ActiveSupport::Inflector#classify`` which Mongoid uses to convert
from filenames and collection names to class names. You can overcome this by specifying a custom
inflection rule for your model class. For example, the following code will take care of the model
named ``Status``.

.. code-block:: ruby

  ActiveSupport::Inflector.inflections do |inflect|
    inflect.singular("status", "status")
  end

The collection for the model's documents can be changed at the class level if you would like
them persisted elsewhere. You can also change the database and session the model gets persisted
in from the defaults.

.. code-block:: ruby

  class Person
    include Mongoid::Document
    store_in collection: "citizens", database: "other", client: "secondary"
  end

The ``store_in`` macro can also take lambdas - a common case for this is multi-tenant applications.

.. code-block:: ruby

  class Band
    include Mongoid::Document
    store_in database: ->{ Thread.current[:database] }
  end

When a document is stored in the database the ruby object will get serialized into BSON
and have a structure like so:

.. code-block:: ruby

  {
    "_id" : ObjectId("4d3ed089fb60ab534684b7e9"),
    "title" : "Sir",
    "name" : {
      "_id" : ObjectId("4d3ed089fb60ab534684b7ff"),
      "first_name" : "Durran"
    },
    "addresses" : [
      {
        "_id" : ObjectId("4d3ed089fb60ab534684b7e0"),
        "city" : "Berlin",
        "country" : "Deutschland"
      }
    ]
  }

Fields
``````

Even though MongoDB is a schemaless database, most uses will be with web applications where
form parameters always come to the server as strings. Mongoid provides an easy mechanism for
transforming these strings into their appropriate types through the definition of fields
in a ``Mongoid::Document``.

Consider a simple class for modeling a person in an application. A person may have a first name,
last name, and middle name. We can define these attributes on a person by using the fields macro.

.. code-block:: ruby

  class Person
    include Mongoid::Document
    field :first_name, type: String
    field :middle_name, type: String
    field :last_name, type: String
  end

Below is a list of valid types for fields.

- ``Array``
- ``BigDecimal``
- ``Boolean``
- ``Date``
- ``DateTime``
- ``Float``
- ``Hash``
- ``Integer``
- ``BSON::ObjectId``
- ``BSON::Binary``
- ``Range``
- ``Regexp``
- ``String``
- ``Symbol``
- ``Time``
- ``TimeWithZone``

If you decide not to specify the type of field with the definition, Mongoid will treat
it as an object and not try to typecast it when sending the values to the database.
This can be advantageous in 2 places, since the lack of attempted conversion will yield
a slight performance gain. However some fields are not supported if not defined as fields.
A note of thumb for what fields you can use are:

- You're not using a web front end and values are already properly cast.
- All of your fields are strings.

.. code-block:: ruby

  class Person
    include Mongoid::Document
    field :first_name
    field :middle_name
    field :last_name
  end

Types that are not supported as dynamic attributes since they cannot be cast are:

- ``BigDecimal``
- ``Date``
- ``DateTime``
- ``Range``

Accessing Field Values
**********************

When a field is defined, Mongoid provides several different ways of accessing the field.

.. code-block:: ruby

  # Get the value of the first_name field
  person.first_name
  person[:first_name]
  person.read_attribute(:first_name)


  # Set the value for the first_name field
  person.first_name = "Jean"
  person[:first_name] = "Jean"
  person.write_attribute(:first_name, "Jean")

If you have defined custom getter/setter, those will be used when using the dot notation.

.. code-block:: ruby

  class Person
    include Mongoid::Document

    field :first_name

    # custom getter
    def first_name
      "My name is Johnny"
    end

    # custom setter
    def first_name=(value)
      p 'Setting.. '
      self.first_name = value
      p '.. done!'
    end
  end

  # Like this:
  person.first_name = 'John'
  # Setting..
  # .. done!

  person.first_name                  # My name is Johnny
  person[:first_name]                # John
  person.read_attribute(:first_name) # John

In cases where you want to set multiple field values at once, there are a few different ways
of handling this as well.

.. code-block:: ruby

  # Get the field values as a hash.
  person.attributes

  # Set the field values in the document.
  Person.new(first_name: "Jean-Baptiste", middle_name: "Emmanuel")
  person.attributes = { first_name: "Jean-Baptiste", middle_name: "Emmanuel" }
  person.write_attributes(
    first_name: "Jean-Baptiste",
    middle_name: "Emmanuel"
  )

Hash Fields
***********

When using a field of type Hash, be wary of adhering to the
`legal key names for mongoDB <http://docs.mongodb.org/manual/reference/limits/#naming-restrictions>`_,
or else the values will not store properly.

.. code-block:: ruby

  class Person
    include Mongoid::Document
    field :first_name
    field :url, type: Hash

    # will update the fields properly and save the values
    def set_vals
      self.first_name = 'Daniel'
      self.url = {'home_page' => 'http://www.homepage.com'}
      save
    end

    # all data will fail to save due to the illegal hashkey
    def set_vals_fail
      self.first_name = 'Daniel'
      self.url = {'home.page' => 'http://www.homepage.com'}
      save
    end
  end

Defaults
********

You can tell a field in Mongoid to always have a default value if nothing has been provided.
Defaults are either static values or lambdas.

.. code-block:: ruby

  class Person
    include Mongoid::Document
    field :blood_alcohol_level, type: Float, default: 0.40
    field :last_drink, type: Time, default: ->{ 10.minutes.ago }
  end

Be wary that default values that are not defined as lambdas or procs are evaluated
at class load time, so the following 2 definitions are not equivalent.
(One would probably prefer the second, which is at document creation time.)

.. code-block:: ruby

  field :dob, type: Time, default: Time.now
  field :dob, type: Time, default: ->{ Time.now }

If you want to set a default with a dependency on the document's state, self inside a lambda
or proc evaluates to the document instance.

.. code-block:: ruby

  field :intoxicated_at, type: Time, default: ->{ new_record? ? 2.hours.ago : Time.now }

When defining a default value as a proc, Mongoid will apply the default after all other
attributes are set. If you want this to happen before the other attributes, set ``pre_processed: true``.

Aliasing Fields
***************

One of the drawbacks of having a schemaless database is that MongoDB must store all field
information along with every document, meaning that it takes up a lot of storage space in RAM
and on disk. A common pattern to limit this is to alias fields to a small number of characters,
while keeping the domain in the application expressive. Mongoid allows you to do this and
reference the fields in the domain via their long names in getters, setters, and criteria while
performing the conversion for you.

.. code-block:: ruby

  class Band
    include Mongoid::Document
    field :n, as: :name, type: String
  end

  band = Band.new(name: "Placebo")
  band.attributes #=> { "n" => "Placebo" }

  criteria = Band.where(name: "Placebo")
  criteria.selector #=> { "n" => "Placebo" }

Custom Fields
*************

You can define custom types in Mongoid and determine how they are serialized and deserialized.
You simply need to provide 3 methods on it for Mongoid to call to convert your object to and
from MongoDB friendly values.

.. code-block:: ruby

  class Profile
    include Mongoid::Document
    field :location, type: Point
  end

  class Point

    attr_reader :x, :y

    def initialize(x, y)
      @x, @y = x, y
    end

    # Converts an object of this instance into a database friendly value.
    def mongoize
      [ x, y ]
    end

    class << self

      # Get the object as it was stored in the database, and instantiate
      # this custom class from it.
      def demongoize(object)
        Point.new(object[0], object[1])
      end

      # Takes any possible object and converts it to how it would be
      # stored in the database.
      def mongoize(object)
        case object
        when Point then object.mongoize
        when Hash then Point.new(object[:x], object[:y]).mongoize
        else object
        end
      end

      # Converts the object that was supplied to a criteria and converts it
      # into a database friendly form.
      def evolve(object)
        case object
        when Point then object.mongoize
        else object
        end
      end
    end
  end

The instance method ``mongoize`` takes an instance of your object, and converts it
into how it will be stored in the database. In our example above, we want to store our
point object as an array in the form ``[ x, y ]``.

The class method ``demongoize`` takes an object as how it was stored in the database,
and is responsible for instantiating an object of your custom type. In this case, we
take an array and instantiate a ``Point`` from it.

The class method ``mongoize`` takes an object that you would use to set on your model
from your application code, and create the object as it would be stored in the database.
This is for cases where you are not passing your model instances of your custom type in the setter:

.. code-block:: ruby

  point = Point.new(12, 24)
  venue = Venue.new(location: point) #=> This uses the mongoize instance method.
  venue = Venue.new(location: [ 12, 24 ]) #=> This uses the mongoize class method.

The class method ``evolve`` takes an object, and determines how it is to be transformed
for use in criteria. For example we may want to write a query like so:

.. code-block:: ruby

  point = Point.new(12, 24)
  Venue.where(location: point)

Not that when accessing custom fields from the document, you will get a new instance
of that object with each call to the getter. This is because Mongoid is generating a new
object from the object from the raw attributes on each access.

We need the point object in the criteria to be transformed to a Mongo friendly value when
it is not as well, ``evolve`` is the method that takes care of this. We check if the passed
in object is a ``Point`` first, in case we also want to be able to pass in ordinary arrays instead.

Reserved Names
**************

If you define a field on your document that conflicts with a reserved method name in Mongoid,
the configuration will raise an error. For a list of these you may look at
``Mongoid.destructive_fields``.

Custom Ids
**********

For cases when you do not want to have ``BSON::ObjectId`` ids, you can override Mongoid's
``_id`` field and set them to whatever you like.

.. code-block:: ruby

  class Band
    include Mongoid::Document
    field :name, type: String
    field :_id, type: String, default: ->{ name }
  end

Dynamic Fields
``````````````

By default Mongoid doesn't supports dynamic fields. You can tell mongoid that you want
to add dynamic fields by including ``Mongoid::Attributes::Dynamic`` in model.
``Mongoid::Attributes::Dynamic`` will allow attributes to get set and persisted on the
document even if a field was not defined for them. There is a slight 'gotcha' however when
dealing with dynamic attributes in that Mongoid is not completely lenient about the use of
``method_missing`` and breaking the public interface of the Document class.

.. code-block:: ruby

  class Person
    include Mongoid::Document
    include Mongoid::Attributes::Dynamic
  end

When dealing with dynamic attributes the following rules apply:

If the attribute exists in the document, Mongoid will provide you with your standard
getter and setter methods. For example, consider a person who has an attribute of
"gender" set on the document:

.. code-block:: ruby

  # Set the person's gender to male.
  person[:gender] = "Male"
  person.gender = "Male"

  # Get the person's gender.
  person.gender

If the attribute does not already exist on the document, Mongoid will not provide you with
the getters and setters and will enforce normal ``method_missing`` behavior. In this case you
must use the other provided accessor methods:
(``[]`` and ``[]=``) or (``read_attribute`` and ``write_attribute``).

.. code-block:: ruby

  # Raise a NoMethodError if value isn't set.
  person.gender
  person.gender = "Male"

  # Retrieve a dynamic field safely.
  person[:gender]
  person.read_attribute(:gender)

  # Write a dynamic field safely.
  person[:gender] = "Male"
  person.write_attribute(:gender, "Male")

Localized Fields
````````````````

Mongoid now supports localized fields without the need of any external gem.

.. code-block:: ruby

  class Product
    include Mongoid::Document
    field :description, localize: true
  end

By telling the field to ``localize``, Mongoid will under the covers store the field
as a hash of locale/value pairs, but normal access to it will behave like a string.

.. code-block:: ruby

  I18n.default_locale = :en
  product = Product.new
  product.description = "Marvelous!"
  I18n.locale = :de
  product.description = "Fantastisch!"

  product.attributes
  #=> { "description" => { "en" => "Marvelous!", "de" => "Fantastisch!" }

You can get and set all the translations at once by using the corresponding ``_translations`` method.

.. code-block:: ruby

  product.description_translations
  #=> { "en" => "Marvelous!", "de" => "Fantastisch!" }
  product.description_translations =
    { "en" => "Marvelous!", "de" => "Wunderbar!" }

Fallbacks
*********

When using fallbacks, Mongoid will automatically use them when a translation is not available.

For Rails applications, set the fallbacks configuration setting to true in your environment.

.. code-block:: ruby

  config.i18n.fallbacks = true

For non-rails applications, you must include the fallbacks module straight to the I18n gem.

.. code-block:: ruby

  require "i18n/backend/fallbacks"
  I18n::Backend::Simple.send(:include, I18n::Backend::Fallbacks)

Then when the fallbacks are defined, if a translation is not present Mongoid will fallback
in order of the defined locales.

.. code-block:: ruby

  I18n.default_locale = :en
  I18n.fallbacks = true
  ::I18n.fallbacks[:de] = [ :de, :en, :es ]
  product = Product.new
  product.description = "Marvelous!"
  I18n.locale = :de
  product.description #=> "Marvelous!"

Querying
********

When querying for localized fields using Mongoid's criteria API, Mongoid will automatically
alter the criteria to match the current locale.

.. code-block:: ruby

  # Match all prodcucts with Marvelous as the description. Locale is en.
  Product.where(description: "Marvelous!")
  # The resulting MongoDB query filter: { "description.en" : "Marvelous!" }

Indexing
********

If you plan to be querying extensively on localized fields, you should index each of the
locales that you plan on searching on.

.. code-block:: ruby

  class Product
    include Mongoid::Document
    field :description, localize: true

    index "description.de" => 1
    index "description.en" => 1
  end

Dirty Tracking
``````````````

Mongoid supports tracking of changed or "dirty" fields with an API that mirrors that of
Active Model. If a defined field has been modified in a model the model will be marked as
dirty and some additional behavior comes into play.

Viewing Changes
***************

There are various ways to view what has been altered on a model. Changes are recorded
from the time a document is instantiated, either as a new document or via loading from
the database up to the time it is saved. Any persistence operation clears the changes.

.. code-block:: ruby

  class Person
    include Mongoid::Document
    field :name, type: String
  end

  person = Person.first
  person.name = "Alan Garner"

  # Check to see if the document has changed.
  person.changed? #=> true

  # Get an array of the names of the changed fields.
  person.changed #=> [ :name ]

  # Get a hash of the old and changed values for each field.
  person.changes #=> { "name" => [ "Alan Parsons", "Alan Garner" ] }

  # Check if a specific field has changed.
  person.name_changed? #=> true

  # Get the changes for a specific field.
  person.name_change #=> [ "Alan Parsons", "Alan Garner" ]

  # Get the previous value for a field.
  person.name_was #=> "Alan Parsons"

Resetting Changes
*****************

You can reset changes of a field to its previous value by calling the reset method.

.. code-block:: ruby

  person = Person.first
  person.name = "Alan Garner"

  # Reset the changed name back to the original
  person.reset_name!
  person.name #=> "Alan Parsons"

Notes On Persistence
********************

Mongoid uses dirty tracking as the core of its persistence operations. It looks at the
changes on a document and atomically updates only what has changed unlike other frameworks
that write the entire document on each save. If no changes have been made, Mongoid will
not hit the database on a call to ``Model#save``.

Viewing Previous Changes
************************

After a document has been persisted, you can see what the changes were previously by
calling ``Model#previous_changes``.

.. code-block:: ruby

  person = Person.first
  person.name = "Alan Garner"
  person.save #=> Clears out current changes.

  # View the previous changes.
  person.previous_changes #=> { "name" => [ "Alan Parsons", "Alan Garner" ] }

Readonly Attributes
```````````````````

You can tell Mongoid that certain attributes are readonly. This will allow documents to be
created with theses attributes, but changes to them will be filtered out.

.. code-block:: ruby

  class Band
    include Mongoid::Document
    field :name, type: String
    field :origin, type: String

    attr_readonly :name, :origin
  end

  band = Band.create(name: "Placebo")
  band.update_attributes(name: "Tool") # Filters out the name change.

If you explicitly try to update or remove the attribute by itself, then a ``ReadonlyAttribute``
error will be raised.

.. code-block:: ruby

  band.update_attribute(:name, "Tool") # Raises the error.
  band.remove_attribute(:name) # Raises the error.

Inheritance
```````````

Mongoid supports inheritance in both root and embedded documents. In scenarios where
documents are inherited from their fields, relations, validations and scopes get copied
down into their child documents, but not vise-versa.

.. code-block:: ruby

  class Canvas
    include Mongoid::Document
    field :name, type: String
    embeds_many :shapes
  end

  class Browser < Canvas
    field :version, type: Integer
    scope :recent, where(:version.gt => 3)
  end

  class Firefox < Browser
  end

  class Shape
    include Mongoid::Document
    field :x, type: Integer
    field :y, type: Integer
    embedded_in :canvas
  end

  class Circle < Shape
    field :radius, type: Float
  end

  class Rectangle < Shape
    field :width, type: Float
    field :height, type: Float
  end

In the above example, ``Canvas``, ``Browser`` and ``Firefox`` will all save in the canvases
collection. An additional attribute ``_type`` is stored in order to make sure when loaded
from the database the correct document is returned. This also holds true for the embedded
documents ``Circle``, ``Rectangle``, and ``Shape``.

Querying Subclasses
*******************

Querying for subclasses is handled in the normal manner, and although the documents are
all in the same collection, queries will only return documents of the correct type,
similar to Single Table Inheritance in ActiveRecord.

.. code-block:: ruby

  # Returns Canvas documents and subclasses
  Canvas.where(name: "Paper")
  # Returns only Firefox documents
  Firefox.where(name: "Window 1")

Associations
************

You can add any type of subclass to a has one or has many association, through either normal
setting or through the build and create methods on the association:

.. code-block:: ruby

  firefox = Firefox.new
  # Builds a Shape object
  firefox.shapes.build({ x: 0, y: 0 })
  # Builds a Circle object
  firefox.shapes.build({ x: 0, y: 0 }, Circle)
  # Creates a Rectangle object
  firefox.shapes.create({ x: 0, y: 0 }, Rectangle)

  rect = Rectangle.new(width: 100, height: 200)
  firefox.shapes

Persistence
-----------

Mongoid supports all expected CRUD operations for those familiar with other Ruby mappers
like Active Record or Data Mapper. What distinguishes Mongoid from other mappers for MongoDB
is that the general persistence operations perform atomic updates on only the fields that have
changed instead of writing the entire document to the database each time.

The persistence sections will provide examples on what database operation is performed
when executing the documented command.

Standard
````````

Mongoid's standard persistence methods come in the form of common methods you would find
in other mapping frameworks. The following table shows all standard operations with
examples.

.. list-table::
   :header-rows: 1
   :widths: 30 60

   * - Operation
     - Example

   * - ``Model.create``

       *Insert a document or multiple documents into the database.*
     -
        .. code-block:: ruby

          Person.create(
            first_name: "Heinrich",
            last_name: "Heine"
          )

          Person.create([
            { first_name: "Heinrich", last_name: "Heine" },
            { first_name: "Willy", last_name: "Brandt" }
          ])

          Person.create(first_name: "Heinrich") do |doc|
            doc.last_name = "Heine"
          end

   * - ``Model.create!``

       *Insert a document or multiple documents into the database, raising an error
       if a validation error occurs.*
     -
        .. code-block:: ruby

          Person.create!(
            first_name: "Heinrich",
            last_name: "Heine"
          )

          Person.create!([
            { first_name: "Heinrich", last_name: "Heine" },
            { first_name: "Willy", last_name: "Brandt" }
          ])

          Person.create!(first_name: "Heinrich") do |doc|
            doc.last_name = "Heine"
          end

   * - ``Model#save``

       *Saves the changed attributes to the database atomically, or insert the document
       if flagged as a new record via* ``Model#new_record?`` *. Can bypass validations if wanted.*
     -
        .. code-block:: ruby

          person = Person.new(
            first_name: "Heinrich",
            last_name: "Heine"
          )
          person.save
          person.save(validate: false)

          person.first_name = "Christian Johan"
          person.save

   * - ``Model#save!``

       *Saves the changed attributes to the database atomically, or insert the document if
       new. Will raise an error of validations fail.*
     -
        .. code-block:: ruby

          person = Person.new(
            first_name: "Heinrich",
            last_name: "Heine"
          )
          person.save!

          person.first_name = "Christian Johan"
          person.save!

   * - ``Model#update_attributes``

       *Update the provided attributes (and any other dirty fields).*
     -
        .. code-block:: ruby

          person.update_attributes!(
            first_name: "Jean",
            last_name: "Zorg"
          )

   * - ``Model#update_attribute``

       *Update a single attribute, bypassing validations.*
     -
        .. code-block:: ruby

          person.update_attribute(:first_name, "Jean")

   * - ``Model#upsert``

       *Performs a MongoDB upsert on the document. If the document exists in the database,
       it will get overwritten with the current attributes of the document in memory.
       If the document does not exist in the database, it will be inserted. Note that
       this only runs the* ``{before|after|around}_upsert`` *callbacks.*
     -
        .. code-block:: ruby

          person = Person.new(
            first_name: "Heinrich",
            last_name: "Heine"
          )
          person.upsert

   * - ``Model#touch``

       *Update the document's updated_at timestamp, optionally with one extra provided
       time field. This will cascade the touch to all* ``belongs_to`` *relations of the document
       with the option set. This operation skips validations and callbacks.*
     -
        .. code-block:: ruby

          person.touch
          person.touch(:audited_at)

   * - ``Model#delete``

       *Deletes the document from the database without running callbacks.*
     -
        .. code-block:: ruby

          person.delete

   * - ``Model#destroy``

       *Deletes the document from the database while running destroy callbacks.*
     -
        .. code-block:: ruby

          person.destroy

   * - ``Model.delete_all``

       *Deletes all documents from the database without running any callbacks.*
     -
        .. code-block:: ruby

          Person.delete_all

   * - ``Model.destroy_all``

       *Deletes all documents from the database while running callbacks. This is a
       potentially expensive operation since all documents will be loaded into memory.*
     -
        .. code-block:: ruby

          Person.destroy_all

Atomic
``````

Although Mongoid performs atomic operations under the covers by default, there may be cases
where you want to do this explicitly without persisting other fields. Mongoid provides support
for all of these operations as well. When executing atomic operations via these methods,
no callbacks will ever get run, nor will any validations.

.. list-table::
   :header-rows: 1
   :widths: 30 60

   * - Operation
     - Example

   * - ``Model#add_to_set``

       *Performs an atomic $addToSet on the field.*
     -
        .. code-block:: ruby

          person.add_to_set(aliases: "Bond")

   * - ``Model#bit``

       *Performs an atomic $bit on the field.*
     -
        .. code-block:: ruby

          person.bit(age: { and: 10, or: 12 })

   * - ``Model#inc``

       *Performs an atomic $inc on the field.*
     -
        .. code-block:: ruby

          person.inc(age: 1)

   * - ``Model#pop``

       *Performs an atomic $pop on the field.*
     -
        .. code-block:: ruby

          person.pop(aliases: 1)

   * - ``Model#pull``

       *Performs an atomic $pull on the field.*
     -
        .. code-block:: ruby

          person.pull(aliases: "Bond")

   * - ``Model#pull_all``

       *Performs an atomic $pullAll on the field.*
     -
        .. code-block:: ruby

          person.pull_all(aliases: [ "Bond", "James" ])

   * - ``Model#push``

       *Performs an atomic $push on the field.*
     -
        .. code-block:: ruby

          person.push(aliases: ["007","008"])

   * - ``Model#rename``

       *Performs an atomic $rename on the field.*
     -
        .. code-block:: ruby

          person.rename(bday: :dob)

   * - ``Model#set``

       *Performs an atomic $set on the field.*
     -
        .. code-block:: ruby

          person.set(name: "Tyler Durden")

   * - ``Model#unset``

       *Performs an atomic $unset on the field.*
     -
        .. code-block:: ruby

          person.unset(:name)


Custom
``````

There may be cases where you want to persist documents to different sources from their
defaults, or with different options from the default. Mongoid provides run-time support
for this as well as support on a per-model basis.

Model Level Persistence Options
*******************************

On a per-model basis, you can tell it to store in a custom collection name, a different
database, or a different session. The following example would store the Band class by
default into a collection named "artists" in the database named "music", with the session "secondary".

Note that the value supplied to the ``client`` option must be configured under ``clients``
in your mongoid.yml.

.. code-block:: ruby

  class Band
    include Mongoid::Document
    store_in collection: "artists", database: "music", client: "secondary"
  end

If no ``store_in`` macro would have been provided, Mongoid would store the model in a
collection named "bands" in the default database in the default session.

Runtime Persistence Options
***************************

You can change at runtime where to store, query, update, or remove documents by prefixing
any operation with ``#with``.

.. code-block:: ruby

  Band.with(database: "music-non-stop").create
  Band.with(collection: "artists").delete_all
  band.with(client: :tertiary).save!

Persisting using with is a one time switch in the persistence context - it creates a new
client under the cover which will get garbage collected after use. Mongoid will not remember
anything specific on the document level regarding how it was saved when using this method.
A potential gotcha with this is persisting a document via with and then immediately updating it after.

.. code-block:: ruby

  band = Band.new(name: "Scuba")
  band.with(collection: "artists").save!
  band.update_attribute(likes: 1000) # This will not save - tries the collection "bands"
  band.with(collection: "artists").update_attribute(likes: 1000) # This will update the document.

Also note that because a new client is created, not to change any options that would cause
a cluster configuration change and instantiate a client that would *never* get garbage collected
due to the new cluster's monitor threads. To avoid this, *only* use ``with`` when changing the
following options:

- ``database``
- ``collection``
- ``client``
- ``read``
- ``write``

If you want to switch the persistence context for all operations at runtime, but don't want
to be using with all over your code, Mongoid provides the ability to do this as the client
and database level globally. The methods for this are ``Mongoid.override_client`` and
``Mongoid.override_database``. A useful case for this are internationalized applications
that store information for different locales in different databases or sessions, but the
schema in each remains the same.

.. code-block:: ruby

  class BandsController < ApplicationController
    before_filter :switch_database
    after_filter :reset_database

    private

    def switch_database
      I18n.locale = params[:locale] || I18n.default_locale
      Mongoid.override_database("my_db_name_#{I18n.locale}")
    end

    def reset_database
      Mongoid.override_database(nil)
    end
  end

In the above example, all persistence operations would be stored in the alternative
database for all remaining operations on this thread. This is why the after request
set the override back to nil - it ensures subsequent requests with no local params
use the default option.

Client and Collection Access
****************************

If you want to drop down to the driver level to perform operations, you can grab
the Mongo client or collection from the model or document instance.

.. code-block:: ruby

  Band.mongo_client
  band.mongo_client
  Band.collection
  band.collection

From here you also have the same runtime persistence options using the driver's ``#with``.

.. code-block:: ruby

  client = Band.mongo_client.with(write: { w: 0 }, database: "musik")
  client[:artists].find(...)

Capped Collections
******************

Mongoid does not provide a mechanism for creating capped collections on the fly - you
will need to create these yourself one time up front either with the driver or via the
Mongo console.

To create a capped collection with the driver:

.. code-block:: ruby

  client[:name, :capped => true, :size => 1024].create

To create a capped collection from the Mongo console:

.. code-block:: javascript

  db.createCollection("name", { capped: true, size: 1024 });


Querying
--------

Relations
---------

Nested Attributes
-----------------

Callbacks
---------

Validation
----------

Indexing
--------

Rails
-----

Extras
------

Upgrading
---------
